@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
hide enum methods
hide empty members

class controler.GameManager {
+ nextTurn(importedResources : Integer[*])
+ updateGraphics()
}

class view.TileMap implements model.VillageObserver{
+ reactToResourcesChange(resources : Integer[*])
+ reactToPlaceableChange(placeables : Placeable[*])
+ reactToTilesChange(tiles : TileType[*]);
}

class model.Building extends model.Placeable{
- productionCapacities : Integer
+ <<create>> Building(placeableType : PlaceableType, input : Map<ResourceType, Integer>, output : Map<ResourceType, Integer>, productionCapacities : Integer 
+ getResourceNeeds() : Map<ResourceType, Integer>
+ getAvailableResources() : Map<ResourceType, Integer>
+ productResources(availableResources : Map<ResourceType,Integer>, neededResources : Map<ResourceType,Integer>)
}

class model.PlaceableFactory {
    + createHouse(position : Intrger[2]) : Placeable
    + createSawmill(position : Intrger[2]) : Placeable
    + createRail(position : Intrger[2]) : Placeable
    + createBar() position : Intrger[2]: Placeable
    + createTrainStation(position : Intrger[2]) : Placeable
    + createForest(position : Intrger[2]) : Placeable
    + createField(position : Intrger[2]) : Placeable
}

class view.Trader implements model.VillageObserver{
+ reactToResourcesChange(resources : Map<ResourceType, Integer>)
+ reactToPlaceableChange(placeables : Placeable[*])
+ reactToTilesChange(tiles : TileType[*]);
+ nextTurn()
}

class view.Printer implements model.VillageObserver{
+ reactToResourcesChange(resources : Map<ResourceType, Integer>)
+ reactToPlaceableChange(placeables : Placeable[*])
+ reactToTilesChange(tiles : TileType[*]);
}

class controler.VillageManager{
+ nextTurn(importedResources : Map<ResourceType, Integer>)
}

enum model.PlaceableType <<enum>>{
HOUSE
SAWMILL
RAIL
BAR
TRAIN_STATION
FOREST
FIELD
}

class model.Resource extends model.Placeable{
- resourceQuantities : Integer
- maxQuantities : Integer
+ <<create>> Resource(placeableType : PlaceableType, resourceType : ResourceType, resourceQuantities : Integer)
+ productResources(availableResources : Map<ResourceType,Integer>, neededResources : Map<ResourceType,Integer>)
+ getResourceNeeds() : Map<ResourceType, Integer>
+ getAvailableResources() : Map<ResourceType, Integer>
- regenerateResources()
}

abstract class model.Placeable {
+ <<create>> Placeable(placeableType : PlaceableType)
+ {abstract} productResources(availableResources : Map<ResourceType,Integer>, neededResources : Map<ResourceType,Integer>)
+ {abstract} getResourceNeeds() : Map<ResourceType, Integer>
+ {abstract} getAvailableResources() : Map<ResourceType, Integer>
+ getPosition() : Integer[2]
+ getPlaceableType() : PlaceableType
}

class model.ResourceType <<enum>>{
WOOD
PLANK
BEER
HOP
ICE
MONEY
}

interface model.BuildingStrategy <<interface>> {
+ buildNewPlaceable(totalResources : Map<ResourceType, Integer>, fulfilmentOfNeeds : Double, placeables : Placeable[*], factory : PlaceableFactory) : Placeable[*]
+ seekCompatibleTiles(List<Placeable> currentPlaceables, List<Placeable> newPlaceables)
}

class model.PrimaryStrategy implements model.BuildingStrategy {
+ buildNewPlaceable(totalResources : Map<ResourceType, Integer>, fulfilmentOfNeeds : Double, placeables : Placeable[*], factory : PlaceableFactory) : Placeable[*]
+ seekCompatibleTiles(List<Placeable> currentPlaceables, List<Placeable> newPlaceables)
}
class model.SecondaryStrategy implements model.BuildingStrategy {
+ buildNewPlaceable(totalResources : Map<ResourceType, Integer>, fulfilmentOfNeeds : Double, placeables : Placeable[*], factory : PlaceableFactory) : Placeable[*]
+ seekCompatibleTiles(List<Placeable> currentPlaceables, List<Placeable> newPlaceables)
}
class model.TertiaryStrategy implements model.BuildingStrategy {
+ buildNewPlaceable(totalResources : Map<ResourceType, Integer>, fulfilmentOfNeeds : Double, placeables : Placeable[*], factory : PlaceableFactory) : Placeable[*]
+ seekCompatibleTiles(List<Placeable> currentPlaceables, List<Placeable> newPlaceables)
}

class model.BuildingStrategyFactory{
+ createPrimaryStrategy() : BuildingStrategy
+ createSecondaryStrategy() : BuildingStrategy
+ createTertiaryStrategy() : BuildingStrategy
}

class model.Village {
+ productResources()
+ getResources() : Map<ResourceType, Integer>
- getNeededResources() : Map<ResourceType, Integer>
- getAvailableResources() : Map<ResourceType, Integer>
+ fulfilmentOfNeeds(usableResources : Map<ResourceType, Integer>, neededResources : Map<ResourceType, Integer>) : Double
+ addObserver(observer : VillageObserver)
- notifyResourceChange()
- notifyPlaceableChange()
+ setBuildingStrategy(strategy : BuildingStrategy)
+ applyStrategy()
+ getTiles() : TileType[*]
}

interface model.VillageObserver <<interface>>{
+ reactToResourcesChange(resources : Map<ResourceType, Integer>)
+ reactToPlaceableChange(placeables : Placeable[*])
+ reactToTilesChange(tiles : TileType[*]);
}

class model.EvolutionOfVillage {
+ determineStrategy()
}

class model.TileType{
    GRASS
    WATER
}

model.EvolutionOfVillage *--> "1\n-village" model.Village
model.EvolutionOfVillage *--> "1\n-buildingStrategyFactory" model.BuildingStrategyFactory
Village *--> "1\n-strategy" model.BuildingStrategy
Village *--> "*\n-placeables" model.Placeable : Compose <
Village *--> "*\n-tiles" model.TileType : construit sur >
Village ..> "<<uses>>" model.PlaceableType
view.TileMap ..> "<<uses>>" Placeable
Village o--> "*\n-observers" model.VillageObserver : < Observe
Village *--> "1\n-placeableFactory" model.PlaceableFactory
model.PlaceableFactory ..> "<<uses>>" model.PlaceableType
model.PlaceableFactory .> "<<uses>>" Placeable
model.PlaceableFactory .> "<<uses>>" Resource
model.PlaceableFactory .> "<<uses>>" Building
Placeable *-> "1\n-type" model.PlaceableType
VillageManager o--> "1\n-tilemap" view.TileMap
VillageManager *--> "1\n-village" Village
VillageManager *--> "1\n-evolutionOfVillage" EvolutionOfVillage
GameManager *--> "1\n-villageManager" controler.VillageManager
GameManager *--u> "1\n-printer" view.Printer
GameManager *--u> "1\n-trader" view.Trader
BuildingStrategyFactory ..> "<<uses>>" model.BuildingStrategy
BuildingStrategyFactory ..> "<<uses>>" model.PrimaryStrategy
model.Building *--> "*\n-resources" model.ResourceType
model.Resource *--> "1\n-resourceType" model.ResourceType
BuildingStrategyFactory ..> "<<uses>>" model.SecondaryStrategy
BuildingStrategyFactory ..> "<<uses>>" model.TertiaryStrategy
BuildingStrategy .> "<<uses>>" model.PlaceableType
@enduml